"""Recurrence Additions

Revision ID: eb9bfa50473b
Revises: bd0618487832
Create Date: 2025-04-20 10:13:44.389225

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'eb9bfa50473b'
down_revision = 'bd0618487832'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
        # Create ENUM type
    # Create ENUM type
    op.execute("""
        CREATE TYPE scarlet.recurrence_pattern_enum AS ENUM (
            'daily', 
            'weekly', 
            'monthly', 
            'yearly'
        )
    """)
    
    # Add new columns with explicit schema
    op.add_column(
        'tasks',
        sa.Column('next_due_date', sa.DateTime(timezone=True)),
        schema='scarlet'
    )
    op.add_column(
        'tasks',
        sa.Column('last_recurred_at', sa.DateTime(timezone=True)),
        schema='scarlet'
    )
    
    # Convert existing column to ENUM
    op.execute("""
        ALTER TABLE scarlet.tasks 
        ALTER COLUMN recurrence_pattern 
        TYPE scarlet.recurrence_pattern_enum 
        USING recurrence_pattern::text::scarlet.recurrence_pattern_enum
    """)
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Remove constraint
    op.drop_constraint(
        'valid_recurrence_pattern', 
        'tasks', 
        schema='scarlet'
    )
    
    # Convert back to text type
    op.execute("""
        ALTER TABLE scarlet.tasks 
        ALTER COLUMN recurrence_pattern 
        TYPE TEXT 
        USING recurrence_pattern::text
    """)
    
    # Remove columns
    op.drop_column('tasks', 'next_due_date', schema='scarlet')
    op.drop_column('tasks', 'last_recurred_at', schema='scarlet')
    
    # Drop ENUM type
    op.execute("DROP TYPE recurrence_pattern_enum")
    # ### end Alembic commands ###
