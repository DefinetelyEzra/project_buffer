"""Starting Afresh

Revision ID: 931ca2258b07
Revises: 626a6fecf074
Create Date: 2025-04-03 18:29:47.701030

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '931ca2258b07'
down_revision = '626a6fecf074'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=80), nullable=False),
    sa.Column('password_hash', sa.String(length=256), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=False),
    sa.Column('preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username'),
    schema='scarlet'
    )
    with op.batch_alter_table('users', schema='scarlet') as batch_op:
        batch_op.create_index('idx_user_email', ['email'], unique=False)
        batch_op.create_index('idx_user_username', ['username'], unique=False)

    op.create_table('projects',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['scarlet.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='scarlet'
    )
    with op.batch_alter_table('projects', schema='scarlet') as batch_op:
        batch_op.create_index('idx_project_created_by', ['created_by'], unique=False)

    op.create_table('surveys',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('profile', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('task_preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('scheduling', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('analytics', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('integrations', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['scarlet.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='scarlet'
    )
    op.create_table('tasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('priority', sa.String(length=6), server_default='medium', nullable=False),
    sa.Column('deadline', sa.DateTime(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('recurring', sa.Boolean(), nullable=True),
    sa.Column('recurrence_pattern', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_completed', sa.Boolean(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('dependency_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('shared_with', postgresql.ARRAY(sa.Integer()), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('energy_level', sa.Integer(), nullable=True),
    sa.Column('context', sa.String(length=100), nullable=True),
    sa.CheckConstraint("priority IN ('high', 'medium', 'low')", name='valid_priority'),
    sa.ForeignKeyConstraint(['dependency_id'], ['scarlet.tasks.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['scarlet.projects.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['scarlet.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='scarlet'
    )
    with op.batch_alter_table('tasks', schema='scarlet') as batch_op:
        batch_op.create_index('idx_task_deadline', ['deadline'], unique=False)
        batch_op.create_index('idx_task_priority', ['priority'], unique=False)
        batch_op.create_index('idx_task_user_id', ['user_id'], unique=False)
        batch_op.create_index('ix_tasks_priority_status', ['priority', 'is_completed'], unique=False)
        batch_op.create_index('ix_tasks_user_deadline', ['user_id', 'deadline'], unique=False)

    op.create_table('subtasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_completed', sa.Boolean(), nullable=True),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.Column('deadline', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['scarlet.tasks.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='scarlet'
    )
    with op.batch_alter_table('subtasks', schema='scarlet') as batch_op:
        batch_op.create_index('idx_subtask_task_id', ['task_id'], unique=False)

    op.create_table('task_behaviors',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('changes', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['scarlet.tasks.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='scarlet'
    )
    with op.batch_alter_table('task_behaviors', schema='scarlet') as batch_op:
        batch_op.create_index('idx_task_behavior_task_id', ['task_id'], unique=False)
        batch_op.create_index('idx_task_behavior_timestamp', ['timestamp'], unique=False)

    op.create_table('task_permissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('permission_level', sa.String(length=50), nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['scarlet.tasks.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['scarlet.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='scarlet'
    )
    with op.batch_alter_table('task_permissions', schema='scarlet') as batch_op:
        batch_op.create_index('idx_task_permission_task_id', ['task_id'], unique=False)
        batch_op.create_index('idx_task_permission_user_id', ['user_id'], unique=False)

    op.create_table('user_behaviors',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('activity_type', sa.String(length=50), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('energy_level', sa.Integer(), nullable=True),
    sa.Column('mood', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['scarlet.tasks.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['scarlet.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='scarlet'
    )
    with op.batch_alter_table('user_behaviors', schema='scarlet') as batch_op:
        batch_op.create_index('idx_user_behavior_timestamp', ['timestamp'], unique=False)
        batch_op.create_index('idx_user_behavior_user_id', ['user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_behaviors', schema='scarlet') as batch_op:
        batch_op.drop_index('idx_user_behavior_user_id')
        batch_op.drop_index('idx_user_behavior_timestamp')

    op.drop_table('user_behaviors', schema='scarlet')
    with op.batch_alter_table('task_permissions', schema='scarlet') as batch_op:
        batch_op.drop_index('idx_task_permission_user_id')
        batch_op.drop_index('idx_task_permission_task_id')

    op.drop_table('task_permissions', schema='scarlet')
    with op.batch_alter_table('task_behaviors', schema='scarlet') as batch_op:
        batch_op.drop_index('idx_task_behavior_timestamp')
        batch_op.drop_index('idx_task_behavior_task_id')

    op.drop_table('task_behaviors', schema='scarlet')
    with op.batch_alter_table('subtasks', schema='scarlet') as batch_op:
        batch_op.drop_index('idx_subtask_task_id')

    op.drop_table('subtasks', schema='scarlet')
    with op.batch_alter_table('tasks', schema='scarlet') as batch_op:
        batch_op.drop_index('ix_tasks_user_deadline')
        batch_op.drop_index('ix_tasks_priority_status')
        batch_op.drop_index('idx_task_user_id')
        batch_op.drop_index('idx_task_priority')
        batch_op.drop_index('idx_task_deadline')

    op.drop_table('tasks', schema='scarlet')
    op.drop_table('surveys', schema='scarlet')
    with op.batch_alter_table('projects', schema='scarlet') as batch_op:
        batch_op.drop_index('idx_project_created_by')

    op.drop_table('projects', schema='scarlet')
    with op.batch_alter_table('users', schema='scarlet') as batch_op:
        batch_op.drop_index('idx_user_username')
        batch_op.drop_index('idx_user_email')

    op.drop_table('users', schema='scarlet')
    # ### end Alembic commands ###
